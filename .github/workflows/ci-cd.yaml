name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - api-gateway
          - user-service
          - collection-service
          - payment-service
          - location-service
          - chat-service
          - notification-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image for ${{ matrix.service }}
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/greenora-${{ matrix.service }}:latest ./${{ matrix.service }}

      - name: Push Docker image for ${{ matrix.service }}
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/greenora-${{ matrix.service }}:latest

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push # Ensure images are built and pushed before deployment

    strategy:
      matrix:
        deployment:
          - api-gateway
          - user-service
          - collection-service
          - payment-service
          - location-service
          - chat-service
          - notification-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        # This action authenticates your GitHub Actions workflow with Google Cloud.
        # It requires a service account key as a GitHub secret.
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} # Your Google Cloud Project ID
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Service Account Key JSON

      - name: Set up gcloud CLI
        # Sets up the Google Cloud SDK (gcloud CLI) environment.
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        # Retrieves kubectl credentials for your GKE cluster.
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }} # Name of your GKE cluster
          location: ${{ secrets.GKE_ZONE }} # Zone or region where your GKE cluster is located (e.g., us-central1-a or us-central1)

      - name: Apply Kubernetes manifests
        # Applies all Kubernetes manifests from the centralized 'k8s/' directory.
        # This assumes all service deployments, services, ingress, cluster-issuer, etc.,
        # are defined in .yaml files directly within the 'k8s/' folder.
        run: |
          echo "Applying all Kubernetes manifests from ./k8s/..."
          kubectl apply -f ./k8s/
          echo "All Kubernetes manifests applied."

      - name: Restart and wait for rollout of ${{ matrix.deployment }}
        # This step ensures that the deployment is restarted and waits for it to be stable.
        # It uses the matrix variable to target each specific deployment by its name.
        run: |
          echo "Restarting and waiting for rollout of ${{ matrix.deployment }}..."
          kubectl rollout restart deployment ${{ matrix.deployment }}
          kubectl rollout status deployment ${{ matrix.deployment }} --timeout=120s
          echo "${{ matrix.deployment }} rollout complete."
